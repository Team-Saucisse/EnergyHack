<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>A Propos</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Inscription</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Connexion</value>
  </data>
  <data name="AddNew" xml:space="preserve">
    <value>NOUVEAU</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>Modifier</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>Visualiser</value>
  </data>
  <data name="ChooseForm" xml:space="preserve">
    <value>Formulaire</value>
  </data>
  <data name="ProvidedBy" xml:space="preserve">
    <value>Proposé par</value>
  </data>
  <data name="AllRightsReserved" xml:space="preserve">
    <value>tous droits réservés</value>
  </data>
  <data name="Actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="SelectView" xml:space="preserve">
    <value>Choisir Vue ...</value>
  </data>
  <data name="SelectForm" xml:space="preserve">
    <value>Choisir Formulaire</value>
  </data>
  <data name="MethodResults" xml:space="preserve">
    <value>Résultat de la méthode</value>
  </data>
  <data name="CFEGenerated" xml:space="preserve">
    <value>Ce site a été généré par CodeFluent Entities {0:F}.</value>
  </data>
  <data name="CFEGenerated2" xml:space="preserve">
    <value>Genéré {0:F}.</value>
  </data>
  <data name="ReturnToPreviousPage" xml:space="preserve">
    <value>Revenir à la page précédente</value>
  </data>
  <data name="ChooseAFileToUpload" xml:space="preserve">
    <value>Choisir un fichier à télécharger</value>
  </data>
  <data name="ExistingBlobPreview" xml:space="preserve">
    <value>Aperçu de Blob existant:</value>
  </data>
  <data name="NewBlobPreview" xml:space="preserve">
    <value>Le Blob a été téléchargé. Nouvel aperçu:</value>
  </data>
  <data name="BlobUpload" xml:space="preserve">
    <value>Téléchargement de Blob</value>
  </data>
  <data name="BlobUploadError" xml:space="preserve">
    <value>Une erreur est survenue lors du téléchargement du fichier.</value>
  </data>
  <data name="BlobDownloadError" xml:space="preserve">
    <value>Une erreur est survenue lors du téléchargement du fichier.</value>
  </data>
  <data name="NamespaceEntities" xml:space="preserve">
    <value>Cet espace de nom contient les entités suivantes</value>
  </data>
  <data name="EntityLayout" xml:space="preserve">
    <value>Définition</value>
  </data>
  <data name="ManagementPage" xml:space="preserve">
    <value> - Page de Gestion</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Accueil</value>
  </data>
  <data name="Views" xml:space="preserve">
    <value>Vues</value>
  </data>
  <data name="EntityPresentation" xml:space="preserve">
    <value>						&lt;p&gt;
							Cette page permet à un utilisateur de créer une nouvelle instance du type &lt;i&gt;{0}&lt;/i&gt;, ou de parcourir les instances existantes déjà stockées dans la base de données:
						&lt;/p&gt;
						&lt;ul&gt;
							&lt;li&gt;&lt;b&gt;Ajout d'une nouvelle instance de type &lt;i&gt;{0}&lt;/i&gt; &lt;/b&gt;: En utilisant le premier hyperlien visible à la gauche de cette page, vous
								pouvez créer une nouvelle instance de l'entité {0}.
								&lt;/li&gt;
							&lt;li&gt;&lt;b&gt;Chargement d'instances de type &lt;i&gt;{0}&lt;/i&gt; existantes &lt;/b&gt;: En utilisant un des hyperliens visible à la gauche de cette page, vous
								pouvez charger et afficher des instances de l'entité {0}. Certaines méthodes requièrent des paramètres, d'autres pas.
								&lt;/li&gt;
							&lt;li&gt;&lt;b&gt;Suppression d'une instance de type &lt;i&gt;{0}&lt;/i&gt; &lt;/b&gt;: Les instances chargées à partir de la base de données, à l'aide d'une des méthodes
								disponibles sur la partie gauche de cette page, peuvent être supprimées, si les règles métiers l'autorisent.
								&lt;/li&gt;
							&lt;li&gt;&lt;b&gt;Appel de méthodes spécifiques du type &lt;i&gt;{0}&lt;/i&gt; &lt;/b&gt;: Tous les types de méthodes pris en charge par CodeFluent Entities peuvent être utilisées par cette application,
								et pas uniquement les méthodes de type chargement, sauvegarde ou suppression.
								&lt;/li&gt;
						&lt;/ul&gt;
	</value>
  </data>
  <data name="EntityPresentation2" xml:space="preserve">
    <value>&lt;table cellspacing="0" cellpadding="0" class="type_design"&gt;
							&lt;tr&gt;
							&lt;td&gt;&lt;img alt="{0} Type" class="type_design" src="{1}" /&gt;&lt;/td&gt;
							&lt;td style="padding-left:20px"&gt;Voici quelques uns des concepts utilisés pour définir une entité telle que &lt;i&gt;{0}&lt;/i&gt; :&lt;ul&gt;
								&lt;li&gt;&lt;b&gt;Propriétés&lt;/b&gt;: Chaque entité est définie notamment par un ensemble de propriétés. Par défaut, les propriétés sont persistantes mais il est aussi possible de déclarer des propriétés calculées dont les valeurs seront dynamiquement déterminées par du code spécifique écrit par le développeur.
									&lt;/li&gt;
								&lt;li&gt;&lt;b&gt;Relations&lt;/b&gt;: Les relations entre entités sont définies simplement commes des propriétés. Différents types de relations sont pris en charge par le produit, telles que l'héritage, l'association, la composition et les cardinalités 1:M, 1:1 symmétrique, M:1 et M:N.
									&lt;/li&gt;
								&lt;li&gt;&lt;b&gt;Instances&lt;/b&gt;: Des instances pré-définies peuvent être déclarées pour toute entité du modèle. Une instance est une liste de valeurs, chaque valeur correspondant à une propriété de l'entité.
										Cette fonction est très pratique par example pour permettre aux développeurs l'initialisation des tables correspondantes aux entités ou à des fins de tests.

									&lt;/li&gt;
								&lt;li&gt;&lt;b&gt;Méthodes&lt;/b&gt;: CodeFluent Entities - à travers le concept de méthode - permet d'aller beaucoup plus loin que les méthodes dites "CRUD" (Create/Read/Update/Delete).
								Les architectes et développeurs peuvent définir des méthodes spécifiques dans un langage simple qui seront disponibles dans toutes les couches de l'application. Les définir de manière indépendante de la plateforme au niveau du modèle n'empêche pas chaque producteur de code de générer du source spécifique et optimisé par rapport à la plateforme qu'il cible.
								Note: l'image de définition de l'entité à gauche ne présente que les méthodes écrite par l'utilisateur, et non les méthodes automatiquement inferrées automatiquement à la production.
									&lt;/li&gt;
								&lt;li&gt;&lt;b&gt;Règles de gestion&lt;/b&gt;: Le concept de règle de gestion dans CodeFluent Entities est très large et permet une implémentation automatique et mécanique d'un certain nombre de comportements répétitifs.
								On trouve des règles de cycle de vie, de transaction, de validation, spécifiques (écrites par le développeur), ainsi que la prise en charge de règles implémentées par des moteurs externes. Ces règles peuvent être appliquées sur les concepts d'entité, de propriété, de méthode, ou globalement sur l'ensemble du projet.
									&lt;/li&gt;
								&lt;li&gt;&lt;b&gt;Vues&lt;/b&gt;: Le concept de vue dans CodeFluent Entities englobe deux concepts distincts: un concept global, orienté essentiellement vers la représentation d'une instance visuellement (par des grilles par exemple), et un concept lié à la persistance, éventuellement pris en charge par la base de données cible.
								D'une vue, les producteurs de persistence seront donc éventuellement capable de générer une vue SQL, alors que les producteurs d'interface graphique seront capable de définir une liste de colonnes à afficher pour la réprésentation d'une instance d'une entité.

									&lt;/li&gt;
							&lt;/ul&gt;&lt;/td&gt;
							&lt;/tr&gt;
						&lt;/table&gt;
	</value>
  </data>
  <data name="TexteToSearch" xml:space="preserve">
    <value>Texte du nom à rechercher...</value>
  </data>
  <data name="NoEditableData" xml:space="preserve">
    <value>Aucune données éditable</value>
  </data>
  <data name="ConfirmEntityDelete" xml:space="preserve">
    <value>Confirmez-vous la suppression définitive de cet élément ?</value>
  </data>
  <data name="CurrentPage" xml:space="preserve">
    <value>Page {0} sur {1}</value>
  </data>
  <data name="SearchByNameWaterMark" xml:space="preserve">
    <value>Texte à rechercher...</value>
  </data>
  <data name="DeleteNotAllowed" xml:space="preserve">
    <value>La suppression de cet élément n'est pas autorisée car il est encore référencé par d'autres éléments.</value>
  </data>
  <data name="GoBack" xml:space="preserve">
    <value>Retour</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Sauvegarder</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Rechercher</value>
  </data>
  <data name="DBErrorDeleteItem" xml:space="preserve">
    <value>Erreur lors de la suppression en base de données</value>
  </data>
  <data name="ImageWeightSizeNotCorrect" xml:space="preserve">
    <value>Le poids et/ou la taille de l'image ne sont pas corrects</value>
  </data>
  <data name="ErrorDuplicateItem" xml:space="preserve">
    <value>Un élément avec les mêmes données existe déjà dans l'application.</value>
  </data>
  <data name="Latitude" xml:space="preserve">
    <value>Le champ Latidude doit être compris entre -90 et 90.</value>
  </data>
  <data name="Longitude" xml:space="preserve">
    <value>Le champ Longitude doit être compris entre -180 et 180.</value>
  </data>
  <data name="Produit" xml:space="preserve">
    <value>Le champ Sous-marché est requis.</value>
  </data>
  <data name="UO" xml:space="preserve">
    <value>Le champ UO attributaire du marché est requis.</value>
  </data>
  <data name="DeleteUser" xml:space="preserve">
    <value>Vous ne pouvez pas supprimer votre propre compte.</value>
  </data>
  <data name="Miniature" xml:space="preserve">
    <value>Le champ Miniature est requis.</value>
  </data>
  <data name="ErrorMedia" xml:space="preserve">
    <value>La miniature est identique à l'une des photos.</value>
  </data>
</root>