//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheSaucisseFactory
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: .
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, CamelId={CamelId}, Id={Id}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://schemas.thesaucissefactory.com")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CodeFluent.Runtime.CodeFluentRelationType))]
    public partial class Appartement : System.ICloneable, System.IComparable, System.IComparable<TheSaucisseFactory.Appartement>, CodeFluent.Runtime.ICodeFluentCollectionEntity<System.Guid>, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<TheSaucisseFactory.Appartement>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private System.Guid _id = CodeFluentPersistence.DefaultGuidValue;
        
        private string _camelId = default(string);
        
        private string _nom = default(string);
        
        private System.Guid _batimentId = CodeFluentPersistence.DefaultGuidValue;
        
        [System.NonSerializedAttribute()]
        private TheSaucisseFactory.Batiment _batiment = null;
        
        [System.NonSerializedAttribute()]
        private TheSaucisseFactory.MesureCollection _mesures;
        
        [System.NonSerializedAttribute()]
        private TheSaucisseFactory.GainEnergyCoinCollection _gainsEnergyCoin;
        
        private string _type = default(string);
        
        private string _orientation = default(string);
        
        private double _surfaceHabitable = CodeFluentPersistence.DefaultDoubleValue;
        
        [System.NonSerializedAttribute()]
        private bool _isSerializing;
        
        [System.NonSerializedAttribute()]
        private bool _isDeserializing;
        
#if SILVERLIGHT
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
public CodeFluent.Runtime.CodeFluentEntityState _entityState;
#else
[System.Runtime.Serialization.DataMemberAttribute(Order=2147483647)]
private CodeFluent.Runtime.CodeFluentEntityState _entityState;
#endif
        
        public Appartement()
        {
            this._id = System.Guid.NewGuid();
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((System.Guid)(ConvertUtilities.ChangeType(value, typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.CamelId;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.Guid))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=100)]
        public System.Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<System.Guid>.Default.Equals(value, this._id) == true))
                {
                    return;
                }
                System.Guid oldKey = this._id;
                if ((value.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
                    this._id = System.Guid.NewGuid();
                }
                else
                {
                    this._id = value;
                }
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._id = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DataAnnotations.Required()]
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=200)]
        public string CamelId
        {
            get
            {
                return this._camelId;
            }
            set
            {
                this._camelId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CamelId"));
            }
        }
        
        [System.ComponentModel.DataAnnotations.Required()]
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=300)]
        public string Nom
        {
            get
            {
                return this._nom;
            }
            set
            {
                this._nom = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Nom"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [System.Runtime.Serialization.DataMemberAttribute(Order=399)]
        public System.Guid BatimentId
        {
            get
            {
                if (((this._batimentId.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                            && (this._batiment != null)))
                {
                    this._batimentId = this._batiment.Id;
                }
                return this._batimentId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<System.Guid>.Default.Equals(value, this.BatimentId) == true))
                {
                    return;
                }
                this._batiment = null;
                this._batimentId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Batiment"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BatimentId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Required()]
        public TheSaucisseFactory.Batiment Batiment
        {
            get
            {
                if ((this._batiment == null))
                {
                    this._batiment = TheSaucisseFactory.Batiment.Load(this._batimentId);
                }
                return this._batiment;
            }
            set
            {
                this._batimentId = CodeFluentPersistence.DefaultGuidValue;
                this._batiment = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Batiment"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("BatimentId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TheSaucisseFactory.MesureCollection Mesures
        {
            get
            {
                if ((this._mesures == null))
                {
                    if (((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._mesures = new TheSaucisseFactory.MesureCollection(this);
                        return this._mesures;
                    }
                    this._mesures = TheSaucisseFactory.MesureCollection.LoadByAppartement(this);
                }
                return this._mesures;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public TheSaucisseFactory.GainEnergyCoinCollection GainsEnergyCoin
        {
            get
            {
                if ((this._gainsEnergyCoin == null))
                {
                    if (((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._gainsEnergyCoin = new TheSaucisseFactory.GainEnergyCoinCollection(this, null);
                        return this._gainsEnergyCoin;
                    }
                    this._gainsEnergyCoin = TheSaucisseFactory.GainEnergyCoinCollection.LoadByAppartement(this);
                }
                return this._gainsEnergyCoin;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=700)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Type"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=800)]
        public string Orientation
        {
            get
            {
                return this._orientation;
            }
            set
            {
                this._orientation = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Orientation"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultDoubleValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(double))]
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=900)]
        public double SurfaceHabitable
        {
            get
            {
                return this._surfaceHabitable;
            }
            set
            {
                this._surfaceHabitable = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("SurfaceHabitable"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        System.Guid CodeFluent.Runtime.Utilities.IKeyable<System.Guid>.Key
        {
            get
            {
                return this.Id;
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsSerializing
        {
            get
            {
                return this._isSerializing;
            }
            set
            {
                this._isSerializing = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected virtual bool IsDeserializing
        {
            get
            {
                return this._isDeserializing;
            }
            set
            {
                this._isDeserializing = value;
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        [field:System.NonSerializedAttribute()]
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<System.Guid>> KeyChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(TheSaucisseFactory.Appartement appartement)
        {
            if ((appartement == null))
            {
                return false;
            }
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return base.Equals(appartement);
            }
            return (this.Id.Equals(appartement.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }
        
        public override bool Equals(object obj)
        {
            TheSaucisseFactory.Appartement appartement = null;
			appartement = obj as TheSaucisseFactory.Appartement;
            return this.Equals(appartement);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            TheSaucisseFactory.Appartement appartement = null;
appartement = value as TheSaucisseFactory.Appartement;
            if ((appartement == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(appartement);
            return localCompareTo;
        }
        
        public virtual int CompareTo(TheSaucisseFactory.Appartement appartement)
        {
            if ((appartement == null))
            {
                throw new System.ArgumentNullException("appartement");
            }
            int localCompareTo = this.Id.CompareTo(appartement.Id);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = TheSaucisseFactory.Resources.Manager.GetStringWithDefault(culture, "TheSaucisseFactory.Appartement.ExternalValidate", "Type \'TheSaucisseFactory.Appartement\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                string localValidate = TheSaucisseFactory.Resources.Manager.GetStringWithDefault(culture, "TheSaucisseFactory.Appartement.Id.NullException", "\'Id\' property cannot be set to \'00000000-0000-0000-0000-000000000000\' for type \'T" +
                        "heSaucisseFactory.Appartement\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate);
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TheSaucisseFactory.Constants.TheSaucisseFactoryStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Appartement", "Delete");
            persistence.AddParameter("@Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "Id", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._camelId = CodeFluentPersistence.GetReaderValue(reader, "CamelId", ((string)(default(string))));
                this._nom = CodeFluentPersistence.GetReaderValue(reader, "Nom", ((string)(default(string))));
                this.BatimentId = CodeFluentPersistence.GetReaderValue(reader, "Batiment_Id", ((System.Guid)(CodeFluentPersistence.DefaultGuidValue)));
                this._type = CodeFluentPersistence.GetReaderValue(reader, "Type", ((string)(default(string))));
                this._orientation = CodeFluentPersistence.GetReaderValue(reader, "Orientation", ((string)(default(string))));
                this._surfaceHabitable = CodeFluentPersistence.GetReaderValue(reader, "SurfaceHabitable", ((double)(CodeFluentPersistence.DefaultDoubleValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static TheSaucisseFactory.Appartement Load(System.Guid id)
        {
            if ((id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return null;
            }
            TheSaucisseFactory.Appartement appartement = new TheSaucisseFactory.Appartement();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TheSaucisseFactory.Constants.TheSaucisseFactoryStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Appartement", "Load");
            persistence.AddParameter("@Id", id, CodeFluentPersistence.DefaultGuidValue);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    appartement.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    appartement.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return appartement;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static TheSaucisseFactory.Appartement LoadById(System.Guid id)
        {
            if ((id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return null;
            }
            TheSaucisseFactory.Appartement appartement = new TheSaucisseFactory.Appartement();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TheSaucisseFactory.Constants.TheSaucisseFactoryStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Appartement", "LoadById");
            persistence.AddParameter("@Id", id, CodeFluentPersistence.DefaultGuidValue);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    appartement.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    appartement.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return appartement;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id.Equals(CodeFluentPersistence.DefaultGuidValue) == true))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TheSaucisseFactory.Constants.TheSaucisseFactoryStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Appartement", "Load");
            persistence.AddParameter("@Id", this.Id);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TheSaucisseFactory.Constants.TheSaucisseFactoryStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Appartement", "Save");
            persistence.AddParameter("@Id", this.Id, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@CamelId", this.CamelId, default(string));
            persistence.AddParameter("@Nom", this.Nom, default(string));
            persistence.AddParameter("@Batiment_Id", this.BatimentId, CodeFluentPersistence.DefaultGuidValue);
            persistence.AddParameter("@Type", this.Type, default(string));
            persistence.AddParameter("@Orientation", this.Orientation, default(string));
            persistence.AddParameter("@SurfaceHabitable", this.SurfaceHabitable, CodeFluentPersistence.DefaultDoubleValue);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(TheSaucisseFactory.Appartement appartement)
        {
            if ((appartement == null))
            {
                return false;
            }
            bool ret = appartement.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(TheSaucisseFactory.Appartement appartement)
        {
            bool ret = TheSaucisseFactory.Appartement.Save(appartement);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(TheSaucisseFactory.Appartement appartement)
        {
            if ((appartement == null))
            {
                return false;
            }
            bool ret = appartement.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("CamelId=");
            writer.Write(this.CamelId);
            writer.Write(",");
            writer.Write("Nom=");
            writer.Write(this.Nom);
            writer.Write(",");
            writer.Write("Batiment=");
            if ((this._batiment != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._batiment)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_batimentId=");
            writer.Write(this._batimentId);
            writer.Write(",");
            writer.Write("Mesures=");
            if ((this._mesures != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._mesures)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("GainsEnergyCoin=");
            if ((this._gainsEnergyCoin != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._gainsEnergyCoin)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("Type=");
            writer.Write(this.Type);
            writer.Write(",");
            writer.Write("Orientation=");
            writer.Write(this.Orientation);
            writer.Write(",");
            writer.Write("SurfaceHabitable=");
            writer.Write(this.SurfaceHabitable);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static TheSaucisseFactory.Appartement LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            TheSaucisseFactory.Appartement appartement;
            System.Guid var = ((System.Guid)(ConvertUtilities.ChangeType(key, typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            appartement = TheSaucisseFactory.Appartement.Load(var);
            return appartement;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public TheSaucisseFactory.Appartement Clone(bool deep)
        {
            TheSaucisseFactory.Appartement appartement = new TheSaucisseFactory.Appartement();
            this.CopyTo(appartement, deep);
            return appartement;
        }
        
        public TheSaucisseFactory.Appartement Clone()
        {
            TheSaucisseFactory.Appartement localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((System.Guid)(ConvertUtilities.ChangeType(dict["Id"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            if ((dict.Contains("SurfaceHabitable") == true))
            {
                this.SurfaceHabitable = ((double)(ConvertUtilities.ChangeType(dict["SurfaceHabitable"], typeof(double), CodeFluentPersistence.DefaultDoubleValue)));
            }
            if ((dict.Contains("Type") == true))
            {
                this.Type = ((string)(ConvertUtilities.ChangeType(dict["Type"], typeof(string), default(string))));
            }
            if ((dict.Contains("Orientation") == true))
            {
                this.Orientation = ((string)(ConvertUtilities.ChangeType(dict["Orientation"], typeof(string), default(string))));
            }
            if ((dict.Contains("CamelId") == true))
            {
                this.CamelId = ((string)(ConvertUtilities.ChangeType(dict["CamelId"], typeof(string), default(string))));
            }
            if ((dict.Contains("Nom") == true))
            {
                this.Nom = ((string)(ConvertUtilities.ChangeType(dict["Nom"], typeof(string), default(string))));
            }
            if ((dict.Contains("BatimentId") == true))
            {
                this.BatimentId = ((System.Guid)(ConvertUtilities.ChangeType(dict["BatimentId"], typeof(System.Guid), CodeFluentPersistence.DefaultGuidValue)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(TheSaucisseFactory.Appartement appartement, bool deep)
        {
            if ((appartement == null))
            {
                throw new System.ArgumentNullException("appartement");
            }
            appartement.Id = this.Id;
            appartement.SurfaceHabitable = this.SurfaceHabitable;
            appartement.Type = this.Type;
            appartement.Orientation = this.Orientation;
            appartement.CamelId = this.CamelId;
            appartement.Nom = this.Nom;
            appartement.BatimentId = this.BatimentId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, appartement));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["SurfaceHabitable"] = this.SurfaceHabitable;
            dict["Type"] = this.Type;
            dict["Orientation"] = this.Orientation;
            dict["CamelId"] = this.CamelId;
            dict["Nom"] = this.Nom;
            dict["BatimentId"] = this.BatimentId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        protected void OnCollectionKeyChanged(System.Guid key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<System.Guid>(key));
            }
        }
        
        [System.Runtime.Serialization.OnSerializingAttribute()]
        protected internal void OnEntitySerializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = true;
        }
        
        [System.Runtime.Serialization.OnSerializedAttribute()]
        protected internal void OnEntitySerialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsSerializing = false;
        }
        
        [System.Runtime.Serialization.OnDeserializedAttribute()]
        protected internal void OnEntityDeserialized(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = false;
        }
        
        [System.Runtime.Serialization.OnDeserializingAttribute()]
        protected internal void OnEntityDeserializing(System.Runtime.Serialization.StreamingContext context)
        {
            this.IsDeserializing = true;
            this._raisePropertyChangedEvents = true;
            this._id = CodeFluentPersistence.DefaultGuidValue;
            this._camelId = default(string);
            this._nom = default(string);
            this._batimentId = CodeFluentPersistence.DefaultGuidValue;
            this._batiment = null;
            this._type = default(string);
            this._orientation = default(string);
            this._surfaceHabitable = CodeFluentPersistence.DefaultDoubleValue;
            this._id = System.Guid.NewGuid();
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
            this._raisePropertyChangedEvents = true;
        }
    }
}
