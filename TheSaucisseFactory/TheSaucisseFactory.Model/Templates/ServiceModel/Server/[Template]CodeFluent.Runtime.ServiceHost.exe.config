<?xml version="1.0" ?>
<?code @ namespace name="System" ?>
<?code @ namespace name="CodeFluent.Model" ?>
<?code @ reference name="CodeFluent.Producers.ServiceModel.dll" ?>
<!-- [%=Producer.GetSignature()%] -->
<configuration>
	<configSections>
		<section name="codeFluent.runtime.serviceHost" type="CodeFluent.Runtime.ServiceHost.Configuration.ServiceSection, CodeFluent.Runtime.ServiceHost" />
		<section name="[%=Producer.Project.DefaultNamespace%]" type="CodeFluent.Runtime.CodeFluentConfigurationSectionHandler, CodeFluent.Runtime" />
	</configSections>

	<[%=Producer.Project.DefaultNamespace%] connectionString="[%=Producer.Project.DefaultConnectionString%]" />

	<codeFluent.runtime.serviceHost startsHostInfo="false" stopServicesAsync="true" stopServicesMaxWaitTime="-1" baseAddress="http://localhost:8000">
		<services>
			<?code foreach(Entity entity in Producer.Project.Entities){ if (!CodeFluent.Producers.ServiceModel.ServiceProducer.PublishService(entity)) continue;
			?>
			<service name="[%=entity.ClrFullTypeName%]" typeName="[%=entity.ServiceClrFullTypeName%], [%=System.IO.Path.GetFileNameWithoutExtension(Producer.ModelProducer.OutputName)%]" />
			<?code }
			?>
		</services>
	</codeFluent.runtime.serviceHost>

	<system.serviceModel>
		<services>
			<?code foreach(Entity entity in Producer.Project.Entities){ if (!CodeFluent.Producers.ServiceModel.ServiceProducer.PublishService(entity)) continue;
			?>
			<service name="[%=entity.ServiceClrFullTypeName%]" behaviorConfiguration="MyServiceTypeBehaviors">
				<endpoint address="Service" binding="wsHttpBinding" bindingConfiguration="wsHttpBindingNoSecurity"
			        contract="[%=entity.ServiceInterface.ClrFullTypeName%]" />
				<endpoint address="mexService" binding="mexHttpBinding"
					contract="[%=entity.ServiceInterface.ClrFullTypeName%]" />
				<?code if (entity.HasPublicBinaryLargeObjectProperties) {
				?>
				<endpoint address="BinaryService" binding="customBinding" bindingConfiguration="wsHttpStreamingBinding"
					  contract="CodeFluent.Runtime.BinaryServices.ICodeFluentBinaryService" />
				<endpoint address="mexBinaryService" binding="mexHttpBinding"
					contract="CodeFluent.Runtime.BinaryServices.ICodeFluentBinaryService" />
				<?code }
					?>
			</service>

			<?code }?>
		</services>

		<behaviors>
			<serviceBehaviors>
				<behavior name="MyServiceTypeBehaviors" >
					<!--
					NOTE: these settings are mostly for debugging as they allow WCF services to send fully detailed .NET exceptions to SOAP clients.
					Make sure you check this out before going into production mode.
					-->
					<serviceDebug includeExceptionDetailInFaults="True" httpHelpPageEnabled="True"/>
					<!--
					NOTE: this metadata setting is not necessary for CodeFluent generated proxy, but needed for other clients, or standard Visual Studio or .NET generated proxies.
					Make sure you check this out before going into production mode.
					-->
					<serviceMetadata httpGetEnabled="true" />
				</behavior>
			</serviceBehaviors>
		</behaviors>

		<bindings>
			<wsHttpBinding>
				<binding name="wsHttpBindingNoSecurity">
					<!--
					NOTE: this security setting is for debugging mostly (no security).
					Make sure you check this out before going into production mode.
					-->
					<security mode="None" />
				</binding>
			</wsHttpBinding>
			<customBinding>
				<binding name="wsHttpStreamingBinding">
					<!--
					NOTE: this is needed (but not mandatory) for full streamed WCF blob support.
					-->
					<httpTransport transferMode="Streamed" maxReceivedMessageSize="2147483647" />
				</binding>
			</customBinding>
		</bindings>
		<diagnostics performanceCounters="Off">
			<!--
			NOTE: these diagnostics settings are for debugging only, as they are *very* verbose.
			Make sure you do not go into production with this.
			-->
			<messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtTransportLevel="true" logMessagesAtServiceLevel="true" />
		</diagnostics>
	</system.serviceModel>

	<!--
	NOTE: these diagnostics settings are for debugging only, as they are *very* verbose.
	Make sure you do not go into production with this.
	-->
	<system.diagnostics>
		<sources>
			<source name="System.ServiceModel" switchValue="Information, ActivityTracing" propagateActivity="true">
				<listeners>
					<add name="XTL" />
					<add name="CFTL" />
				</listeners>
			</source>
			<source name="System.ServiceModel.MessageLogging" switchValue="Information, ActivityTracing">
				<listeners>
					<add name="XTL" />
				</listeners>
			</source>
		</sources>
		<sharedListeners>
			<add initializeData="[%=Producer.Project.DefaultNamespace%].svclog" type="System.Diagnostics.XmlWriterTraceListener" name="XTL" />
			<!--
			NOTE: this CodeFluent specific trace listener allows you to see WCF Services exceptions directly displayed in the CodeFluent.Runtime.ServiceHost.exe console
			To run services in console mode, just launch CodeFluent.Runtime.ServiceHost.exe with the Explorer or a .bat or .cmd file.
			-->
			<add type="CodeFluent.Runtime.ServiceHost.Utilities.WcfTraceListener, CodeFluent.Runtime.ServiceHost" name="CFTL" />
		</sharedListeners>
		<trace autoflush="true" />
	</system.diagnostics>
</configuration>
