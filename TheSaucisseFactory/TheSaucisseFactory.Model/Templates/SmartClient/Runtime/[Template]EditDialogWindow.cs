[%@ namespace name="CodeFluent.Producers.CodeDom" %]
[%@ namespace name="CodeFluent.Model.Code" %]
[%@ namespace name="CodeFluent.Model.UI" %]
[%@ namespace name="CodeFluent.Model" %]
[%@ namespace name="CodeFluent.Producers.SmartClient" %]//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=System.Environment.Version%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace CodeFluent.Runtime.SmartClient
{
    /// <summary>
    /// Interaction logic for EditDialogWindow.xaml
    /// </summary>
    public partial class EditDialogWindow : Window
    {
        private IEntityEdit _currentEditControl;
        private bool _mustReloadData;

        public bool MustReloadData
        {
            get { return _mustReloadData; }
        }

        public EditDialogWindow()
        {
            InitializeComponent();
            _mustReloadData = false;
        }

        public void setEditForm(IEntityEdit EditForm)
        {
            this._currentEditControl = EditForm;
            setEditForm((UserControl)EditForm);
        }


        public void setEditForm(UserControl EditForm)
        {
            this.mainContainer.Children.Clear();
            this.mainContainer.Children.Add(EditForm);
        }

        public void SetReadOnly()
        {
          this.ButtonCancel.Visibility = Visibility.Collapsed;
        }


        private void ButtonOk_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Cursor = Cursors.Wait;
                if (this._currentEditControl != null)
                {
                
                    this._currentEditControl.Save();
                }
                DialogResult = true;
                this._currentEditControl = null;
                Close();
            }
            catch (System.ServiceModel.FaultException<System.ServiceModel.ExceptionDetail> exception)
            {
                if (exception.Detail != null)
                {
                    if (exception.Detail.Type == typeof(CodeFluent.Runtime.CodeFluentConcurrencyException).FullName)
                    {
                        MessageBox.Show("Concurrency exception. All changes will be lost.");
                        this._mustReloadData = true;
                        Close();
                    }
                    else if (exception.Detail.Type == typeof(CodeFluent.Runtime.CodeFluentDuplicateException).FullName) 
                    {
                        MessageBox.Show("Unique constraint violation");
                    }
                    else if (exception.Detail.Type == typeof(CodeFluent.Runtime.CodeFluentValidationException).FullName)
                    {
                        MessageBox.Show("Field validation error: " + exception.Detail.Message);
                    }
                }
            }           
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
            }
            finally
            {
                Cursor = Cursors.Arrow;
            }
        }
        
        private void ButtonCancel_Click(object sender, RoutedEventArgs e)
        {   
            try
            {
                if (this._currentEditControl != null)
                {
                    this._currentEditControl.Cancel();
                }
                DialogResult = false;
                this._currentEditControl = null;
                Close();
            }
            catch (Exception exception)
            {
                MessageBox.Show("Unknown Exception: "  + exception.Message);
            }
        }

        private void ButtonApply_Click(object sender, RoutedEventArgs e)
        {

        }
    }
}