[%@ remark text="This file builds view user controls for entities and sets" %]
[%@ template language="CSharp" output="false" %]
[%@ namespace name="CodeFluent.Producers.CodeDom" %]
[%@ namespace name="CodeFluent.Model" %]
[%@ namespace name="System" %]
[%@ namespace name="CodeFluent.Runtime.Utilities" %]
[%@ namespace name="System.IO" %]
[%@ namespace name="CodeFluent.Producers.SmartClient" %]
[%
if (!Context.Contains("inTemplate"))
{
	Context["inTemplate"] = null; // anything does it
	foreach(Entity e in Producer.Project.Entities)
	{
		if (e.UIEnabled && !e.IsLightWeight && e.IsPersistent)
		{
			string EntityName = e.Name;
			
			// build a new target path to re-run ourselves with a different file path
					string targetDirectory = Path.Combine(Path.GetDirectoryName(TargetPath), e.Namespace);
			
			string targetPath = Path.Combine(targetDirectory,
				Path.GetFileNameWithoutExtension(TargetPath).Replace("Entity", EntityName) + ".xaml.cs");

			// we prefer CF's generation wrapper object instead of raw .NET file objects
			using (GeneratedFile file = new GeneratedFile(Producer.Project, targetPath))
			{
				// check we can overwrite or not depending on node's production attributes
				if ((file.HasBeenChanged) && ((e.ProductionFlags & ProductionFlags.Overwrite) == 0))
				{
					// show some useful information
					Producer.RaiseProduction(Producer, file.CreateFileSkipEvent(e.ClrFullTypeName));
					continue;
				}

				// note: we don't care about the output="false" here
				Producer.RaiseProduction(Producer, ProductionEventArgs.CreateFileTemplateGenerateEvent(targetPath, Template.FilePath));
				file.Open(Producer, Producer.OutputEncoding);
				
				// add the type to the context
				Context["CurrentEntity"] = e;
				
				// update targetPath
				Context["TargetPath"] = targetPath;
				
				// go recursive, and this will jump to the else part of this file
				Template.Run(file.Writer, Context);
			}
		}
	}
}
else
{
	Entity entity = Context["CurrentEntity"] as Entity;
	string targetPath = Context["TargetPath"] as string;
	if (entity != null)
	{%]//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=System.Environment.Version%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using System.Windows.Controls;
using System.Collections.Generic;
using System.Windows.Input;
using CodeFluent.Runtime;
using CodeFluent.Runtime.SmartClient;

namespace [%=Producer.Project.DefaultNamespace %].SmartClient.Controls
{
	public partial class [%=entity.Name%]View : UserControl, IEntityView
	{			        
		public [%=entity.Name%]View() 
		{
			InitializeComponent();
		}
		
		public void Reload()
		{
			try
			{
				Application.Current.MainWindow.Cursor = Cursors.Wait;
				this.ViewList.ItemsSource = [%=entity.Set.ProxyClrFullTypeName%].[%=entity.LoadAllMethod.Name%]();
			}
			catch (CodeFluent.Runtime.CodeFluentRuntimeException)
			{
				MessageBox.Show("An error occured while trying to contact the service, please check that your service is running and that the .config file is correct", "");
				
			}
			finally
			{
				Application.Current.MainWindow.Cursor = Cursors.Arrow;
			}
		}
		
		public void Clear()
		{
			this.ViewList.ItemsSource = null;
			this.ViewList.Items.Clear();
		}
		
		private bool EditEntity([%=entity.ProxyClrFullTypeName%] entity)
		{
			EditDialogWindow Edit = new EditDialogWindow();
            [%=entity.Name%]Edit EditControl = new [%=entity.Name%]Edit();
            EditControl.AssociatedEntity = entity;
            Edit.setEditForm((IEntityEdit)EditControl);
            Edit.Owner = Application.Current.MainWindow;
			Edit.WindowStartupLocation = WindowStartupLocation.CenterOwner;
			Edit.Title = "[%=ConvertUtilities.Decamelize(entity.Name)%] Editor";
			bool? result = null;
			result = Edit.ShowDialog();

            if (result != null && result == true)
            {
				return true;
            }
            else if (result != null && result == false)
            {
				if (Edit.MustReloadData)
				{
					Reload();
				}
				 return false;
            }
			return false;
		}
		
		public void AddNewEntity()
		{
			[%=entity.ProxyClrFullTypeName%] newEntity = new [%=entity.ProxyClrFullTypeName%]();
			if (EditEntity(newEntity))
			{
				if ((([%=entity.Set.ProxyClrFullTypeName%])ViewList.ItemsSource).Count == 0)
                {
                    Reload();
                }
                else
                {
					(([%=entity.Set.ProxyClrFullTypeName%]) ViewList.ItemsSource).Add(newEntity);
				}
			}
			else
			{
			
			}
		}
		
		public void RemoveSelectedEntity()
		{
			[%=entity.Set.ProxyClrFullTypeName%] entityCollection;
			List<[%=entity.ProxyClrFullTypeName%]> entityList = new List<[%=entity.ProxyClrFullTypeName%]>();
			
			foreach ([%=entity.ProxyClrFullTypeName%] entity in ViewList.SelectedItems)
			{
				entity.Delete();
				entityList.Add(entity);
			}
			
			entityCollection = (([%=entity.Set.ProxyClrFullTypeName%]) ViewList.ItemsSource);
		
            foreach ([%=entity.ProxyClrFullTypeName%] entity in entityList)
            {
                entityCollection.Remove(entity);
            }
		}
		
		private void ViewList_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
			DependencyObject depObj = e.OriginalSource as DependencyObject;
            if (depObj != null)
            {
                DependencyObject current = depObj;
                while (current != null && current != ViewList && (current is Visual || current is Visual3D))
                {
                    ListViewItem lvi = current as ListViewItem;
                    if (lvi != null)
                    {
						[%=entity.ProxyClrFullTypeName%] selectedEntity = lvi.DataContext as [%=entity.ProxyClrFullTypeName%];
						EditEntity(selectedEntity);
                        return;
                    }
                    current = VisualTreeHelper.GetParent(current);
                }
            }
        }
	}
}
	[%Producer.AddFileName(targetPath);
	Producer.AddToGeneratedFiles(targetPath);
	return;
	}
}%]